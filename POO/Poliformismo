Clases: Operacion
public abstract class Operacion {
    protected int valor1, valor2, resultado;

    public Operacion(int valor1, int valor2) {
        this.valor1 = valor1;
        this.valor2 = valor2;
    }

    public void imprimir() {
        System.out.println(resultado);
    }

    public abstract void operar();
}
La clase 'Operacion' es abstracta y define un método abstracto llamado 'operar'. Luego significa que cualquier clase que herede de 'Operacion' está obligado a implementarlo.

La implementación del método operar depende de la subclase y el concepto que represente la misma.

Clases: Suma
public class Suma extends Operacion {

    public Suma(int valor1, int valor2) {
        super(valor1, valor2);
    }

    public void operar() {
        resultado = valor1 + valor2;
    }

}
Clases: Resta
public class Resta extends Operacion {

    public Resta(int valor1, int valor2) {
        super(valor1, valor2);
    }

    public void operar() {
        resultado = valor1 - valor2;
    }

}
Las dos subclases de la clase 'Operacion' cumplen con el contrato de implementar el método 'operar', en caso de no hacerlo se genera un error sintáctico.

Veamos ahora como se genera el comportamiento polimórfico:

Clases:
import java.util.ArrayList;

public class Prueba {

    public static void main(String[] ar) {
        ArrayList<Operacion> lista1 = new ArrayList<Operacion>();
        lista1.add(new Suma(2, 34));
        lista1.add(new Resta(3, 2));
        lista1.add(new Suma(100, 1));
        for (Operacion op : lista1) {
            op.operar();
            op.imprimir();
        }
    }
}